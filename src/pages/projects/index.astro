---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PageHead from '@/components/PageHead.astro'
import BuyMeCoffee from '@/components/react/buymeacoffe'
import PaginationComponent from '@/components/ui/pagination'
import Layout from '@/layouts/Layout.astro'
import { getAllProjects } from '@/lib/data-utils'
import type { PaginateFunction } from 'astro'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'

// Define the RepoProject type to match your project data structure
type RepoProject = {
  id: string | number;
  data: {
    name: string;
    image: string;
    description?: string;
    tags?: string[];
    endDate?: string;
    language?: string;
  };
};

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allProjects = await getAllProjects()
  return paginate(allProjects, { pageSize: 6 })
}

const { page } = Astro.props
const projectData = await getAllProjects()
const currentUrl = Astro.url;

const username = 'PramudithaN';
let reposRaw = [];
try {
  const res = await fetch(`https://api.github.com/users/${username}/repos?per_page=100&sort=updated`);
  if (res.ok) {
    reposRaw = await res.json();
  } else {
    reposRaw = [];
  }
} catch (e) {
  reposRaw = [];
}
const repos: RepoProject[] = Array.isArray(reposRaw)
  ? reposRaw.map((repo: any) => ({
      id: repo.id,
      data: {
        name: repo.name,
        image: '/default-project-image.png',
        description: repo.description,
        tags: repo.topics || [],
        endDate: repo.pushed_at,
        language: repo.language,
      },
    }))
  : [];
---

<Layout canonicalUrl={currentUrl}>
  <PageHead slot="head" title="Projects" />
  <Breadcrumbs
    items={[
      { label: 'Projects', href: '/projects', icon: 'lucide:folder' },
    ]}
  />

  <section class="max-screen mt-12 px-4 md:px-6">
    <div class="flex flex-row items-center justify-between mb-8">
      <div>
          <div class="flex w-fit items-center gap-2 text-primary">
            <Icon name="lucide:star" class="h-4 w-4 text-yellow-500 animate-pulse" />
            <p class="shimmer word-spacing font-mono text-sm uppercase leading-none text-primary">My Work</p>
          </div>
          <h2
            id="skills-title"
            class="font-custom text-foreground text-4xl font-bold mt-2"
          >
            Projects
          </h2>
          <p class="text-muted-foreground text-md max-w-2xl mt-3">
            Here are some of the projects I have worked on. I am always looking for new challenges and opportunities to learn and grow as a developer. If you have a project in mind, feel free to reach out!
          </p>
      </div>
      <div>
        <!-- <BuyMeCoffee /> -->
      </div>  
    </div>
  
    <div class="mt-12 grid grid-cols-1 sm:grid-cols-2 gap-8 mb-16">
      {console.log(repos)}
      {(repos.length > 0 ? repos : [
      {
        id: 1,
        data: {
        name: "Sample Project",
        image: "/default-project-image.png",
        description: "This is a sample project shown as fallback.",
        tags: ["astro", "demo"],
        endDate: "2024-01-01T00:00:00Z",
        language: "TypeScript",
        },
      },
      {
        id: 2,
        data: {
        name: "Another Example",
        image: "/default-project-image.png",
        description: "Another hardcoded project for fallback display.",
        tags: ["fallback", "example"],
        endDate: "2023-12-15T00:00:00Z",
        language: "JavaScript",
        },
      },
      ]).map((project: RepoProject, _: number) => (
      <div class="bg-card rounded-2xl p-6 flex flex-col justify-between shadow-md border border-card-foreground/10 transition-all duration-300 hover:shadow-lg">
        <div class="flex items-center justify-between mb-2">
        <h3 class="text-lg font-semibold text-foreground break-all">
          <a href={`https://github.com/PramudithaN/${project.data.name}`} target="_blank" rel="noopener noreferrer" class="hover:underline flex items-center gap-1">
          {project.data.name}
          <Icon name="lucide:github" class="inline h-4 w-4 ml-1 text-muted-foreground" />
          </a>
        </h3>
        </div>
        <p class="text-sm text-muted-foreground mb-4 min-h-[40px]">
        {project.data.description || "No description provided."}
        </p>
        <div class="flex flex-wrap gap-2 mb-4">
        {project.data.tags?.[0] && (
          <span class="text-xs px-2 py-1 rounded bg-primary/10 text-primary font-medium">{project.data.tags[0]}</span>
        )}
        {project.data.tags?.[1] && (
          <span class="text-xs px-2 py-1 rounded bg-primary/10 text-primary font-medium">{project.data.tags[1]}</span>
        )}
        {/* Language badge from API */}
        {project.data.language && (
          <span
          class={`rounded px-2 py-0.5 text-xs font-medium flex items-center gap-1
          ${
          ({
            JavaScript: 'bg-yellow-900/40 text-yellow-200',
            TypeScript: 'bg-blue-900/40 text-blue-200',
            Python: 'bg-blue-900/40 text-blue-200',
            Java: 'bg-orange-900/40 text-orange-200',
            HTML: 'bg-orange-900/40 text-orange-200',
            CSS: 'bg-indigo-900/40 text-indigo-200',
            Shell: 'bg-green-900/40 text-green-200',
            C: 'bg-gray-900/40 text-gray-200',
            'C++': 'bg-pink-900/40 text-pink-200',
            PHP: 'bg-indigo-900/40 text-indigo-200',
            Ruby: 'bg-red-900/40 text-red-200',
            Go: 'bg-cyan-900/40 text-cyan-200',
            Rust: 'bg-orange-900/40 text-orange-200',
            Dart: 'bg-teal-900/40 text-teal-200',
            Swift: 'bg-orange-900/40 text-orange-200',
            Kotlin: 'bg-purple-900/40 text-purple-200',
          } as Record<string, string>)[String(project.data.language)] || 'bg-muted text-foreground'
          }
          `}
          >
          {project.data.language}
          </span>
        )}
        </div>
        <div class="flex items-center justify-between text-xs text-muted-foreground mt-auto pt-2 border-t border-border/40">
        <div class="flex gap-4">
          <span>0 stars</span>
          <span>0 forks</span>
        </div>
        <span>
          Updated {project.data.endDate ? new Date(project.data.endDate).toLocaleDateString() : ''}
        </span>
        </div>
      </div>
      ))}
    </div>

    <!-- <div class="mt-16 mb-16">
      <PaginationComponent
      currentPage={page.currentPage}
      totalPages={page.lastPage}
      baseUrl="/projects/"
      pageSize={10}
      client:load
      />
    </div> -->
  </section>
</Layout>